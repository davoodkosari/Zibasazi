@using Radyn.Congress.DataStructure
@using Radyn.Congress.Tools
@using Radyn.FileManager
@using Radyn.FormGenerator.Tools
@using Radyn.Web.Mvc.Utility
@using Radyn.WebApp.AppCode.Security
@using Radyn.WebApp.Areas.Common.Component
@using Radyn.Utility
@using Radyn.Web.Mvc
@using Radyn.WebApp.Areas.Congress.Tools
@using Radyn.WebApp.Areas.FormGenerator.Tools

@model Article
<input type="hidden" value="@ViewBag.Status" id="Status" name="Status" />
@{Html.Radyn().Theme("RadynEditor").Render(); }
<script type="text/javascript">
    $(document).ready(function () {
        

        $('#ArticleOrginalText').summernote({
            lang: '@SessionParameters.Culture',
            focus: true,
            height: 250,
            disablelink: true,
            elementname: 'ArticleOrginalText',
            disableselectimage: true,
            codemirror: {
                theme: 'united'
            }
        });

        GetCountArticle();
        var articleOrginalWordCount = document.getElementById("ArticleOrginalWordCount").value;
        $("#rcounterarticle").html(articleOrginalWordCount).hide();
        $("#rcounterarticle").fadeIn();


        $("#divArticleText").bind('input blur focus', function () {
            GetCountArticle();
        });
    });

  

    function countWordsArticle() {
        var object = $('#ArticleOrginalText');
        if (object != undefined) {
            var s = $('#ArticleOrginalText').val();
            var wordCount = 0;
            wordCount = (s.split(" ").length);
            return wordCount;
        }
        return 0;
    }


    function GetCountArticle() {
        var object = $('#ArticleOrginalText');
        if (object != undefined) {
            var articleOrginalWordCount = document.getElementById("ArticleOrginalWordCount").value;
            var wordcount = $('#ArticleOrginalText').val();
            if (wordcount !== "" && wordcount != undefined) {
                var number = countWordsArticle();
                var counter = parseInt(articleOrginalWordCount) - number;
                $("#Wordarticlecounter").html('@Resources.Congress.WordCount' + "(" + number + ")");
                $("#rcounterarticle").html(counter);
                $("#rcounterarticle").fadeIn();
                if (counter > 0) {
                    $("#rcounterarticle").css("color", "#5500fd");
                } else {
                    $("#rcounterarticle").css("color", "red");
                }
            } else {
                $("#rcounterarticle").html(articleOrginalWordCount);
                $("#rcounterarticle").fadeIn();
            }
        }

    }
</script>
<input type="hidden" value="@(SessionParameters.CurrentCongress.Configuration.AbstractWordCount)" name="AbstractWordCount" id="AbstractWordCount" />
<input type="hidden" value="@(SessionParameters.CurrentCongress.Configuration.ArticleOrginalWordCount)" name="ArticleOrginalWordCount" id="ArticleOrginalWordCount" />
<div class="radynForm">
    <div class="users-page full-size detail-edit">

        <div class="item-input">
            <div class="table-row-cap">
                <div class="item">
                    @string.Format(Resources.Congress.ArticleTitle, SessionParameters.CurrentCongress.Configuration.ArticleTitle)
                </div>
            </div>
            <div class="table-row-item readonly">
                <div class="item">
                    @Html.DisplayFor(m => m.Title)
                </div>
            </div>
        </div>
        <div class="item-input">
            <div class="table-row-cap">
                <div class="item">
                    @Resources.Congress.PublishDate
                </div>
            </div>
            <div class="table-row-item readonly">
                <div class="item">
                    @Html.DisplayFor(article => article.PublishDate)
                </div>
            </div>
        </div>

        <div class="item-input">
            <div class="table-row-cap">
                <div class="item">
                    @Resources.Congress.PivotCategory
                </div>
            </div>
            <div class="table-row-item readonly">
                <div class="item">
                    @{
                        if (Model.Pivot.PivotCategoryId != null)
                        {
                            @Html.DisplayFor(article => article.Pivot.PivotCategory.Title)
                        }

                    }
                </div>
            </div>
        </div>


        <div class="item-input">
            <div class="table-row-cap">
                <div class="item">
                    @Resources.Congress.Pivot
                </div>
            </div>
            <div class="table-row-item readonly">
                <div class="item">
                    @Html.DisplayFor(article => article.Pivot.Title)
                </div>
            </div>
        </div>
        <div class="item-input">
            <div class="table-row-cap">
                <div class="item">
                    @string.Format(Resources.Congress.ArticleState, SessionParameters.CurrentCongress.Configuration.ArticleTitle)
                </div>
            </div>
            <div class="table-row-item readonly">
                <div class="item">
                    @if (Model != null)
                    {
                        @(Model.Status.ToString().ToEnum<Enums.ArticleState>().GetDescriptionInLocalization())
                    }
                </div>
            </div>
        </div>
        <div class="item-input">
            <div class="table-row-cap">
                <div class="item">
                    @Resources.Congress.FinalState
                </div>
            </div>
            <div class="table-row-item readonly">
                <div class="item">
                    @if (Model != null)
                    {
                        @(Model.FinalState.ToString().ToEnum<Enums.FinalState>().GetDescriptionInLocalization())
                    }
                </div>
            </div>
        </div>
        @if (SessionParameters.CurrentCongress.Configuration.HasArticlePayment)
        {
            <div class="item-input">
                <div class="table-row-cap">
                    <div class="item">
                        @Resources.Congress.PaymentStatus

                    </div>
                </div>
                <div class="table-row-item readonly">
                    <div class="item">
                        @if (Model != null && Model.PayStatus.HasValue)
                        {
                            @(Model.PayStatus.ToString().ToEnum<Enums.ArticlepayState>().GetDescriptionInLocalization())
                        }
                    </div>
                </div>
            </div>
        }
    @if (SessionParameters.CurrentCongress != null && SessionParameters.CurrentCongress.Configuration.AllowUserAddAuthor)
    {
        
            Html.RenderAction("GetAuthorList", "ArticlePanel", new { area = "Congress", hiddenEdit= true });

        
        
    }
    @if (SessionParameters.CurrentCongress != null && SessionParameters.CurrentCongress.Configuration.EnabledArticleKeyword)
    {
        <div class="item-input">
            <div class="table-row-cap">
                <div class="item">
                    @Resources.Congress.KeyWord
                </div>
            </div>
            <div class="table-row-item readonly">
                <div class="item">
                    @Html.DisplayFor(article => article.Keyword)
                </div>
            </div>
        </div>
    }
        <div class="item-input">
            <div class="table-row-cap">
                <div class="item">
                    @Resources.Congress.Description
                </div>
            </div>
            <div class="table-row-item readonly">
                <div class="item">
                    @Html.DisplayFor(article => article.Description)
                </div>
            </div>
        </div>
        @if (SessionParameters.CurrentCongress.Configuration.AllowGetArticleAbstract() || !string.IsNullOrEmpty(Model.Abstract) || Model.AbstractFileId != null)
        {
            if (SessionParameters.CurrentCongress.Configuration.GetAbstractFile.Equals(false) || !string.IsNullOrEmpty(Model.Abstract))
            {
                <div class="fit item-input" id="divAbstract">
                    <div class="table-row-cap" style="width: 100%;height: 25px">
                        <div style="text-align: center" class="item">
                            @Resources.Congress.ArticleAbstract
                            <span id="Wordcounter"></span>
                        </div>
                    </div>
                    <div class="table-row-item readonly " style="height: 350px;width: 100%">
                        <div class="item">
                            @{
                                Html.HtmlEncoder(Model.Abstract);

                            }
                        </div>
                    </div>
                </div>
            }
            if (SessionParameters.CurrentCongress.Configuration.GetAbstractFile.Equals(true) || Model.AbstractFileId != null)
            {
                <div class="fit">
                    <div class="table-row-cap table-c-fit">
                        <div class="item">
                            @Resources.Congress.AbstractFile

                        </div>
                    </div>
                    <div class="table-row-item table-c-fit table-fit ">
                        <div class="item">
                            @{
                                if (Model != null && Model.AbstractFileId != null)
                                {
                                    Html.RadynFile().Image().ID(Model.AbstractFileId.Value).Download().Render();
                                }
                            }
                        </div>
                    </div>
                </div>
            }

        }


        @if (SessionParameters.CurrentCongress.Configuration.AllowGetArticleOrginal() || !string.IsNullOrEmpty(Model.ArticleOrginalText) || Model.OrginalFileId.HasValue)
        {
            if (SessionParameters.CurrentCongress.Configuration.GetArticleOrginalFile.Equals(false) || !string.IsNullOrEmpty(Model.ArticleOrginalText))
            {
                <div class="item-input fit">
                    <div class="table-row-item table-c-double table-fit readonly header-forms" style="width: 100%;height: 40px">
                        <div style="text-align: center" class="item">
                            <span style="color: red">*</span>    @string.Format(SessionParameters.CurrentCongress.Configuration.ArticleOrginalTitle)
                            <span id="Wordarticlecounter"></span>
                        </div>
                    </div>

                </div>
                <div class="item-input fit">

                    <div class="table-row-item table-c-double table-fit " style="height: 350px;width: 100%" @*style="overflow-y: scroll"*@>
                        <div class="item" id="divArticleText">
                            @Html.TextAreaFor(model => model.ArticleOrginalText, new { style = "height:180px;" })
                        </div>
                    </div>
                </div>
                <div class="item-input">
                    <div class="table-row-cap ">
                        <div class="item">
                            @string.Format(Resources.Congress.MinimumNumberOfWords, SessionParameters.CurrentCongress.Configuration.ArticleTitle)
                        </div>
                    </div>
                    <div class="table-row-item readonly">
                        <div class="item">
                            @(SessionParameters.CurrentCongress.Configuration.MinArticleOrginalWordCount)
                        </div>
                    </div>
                </div>
                <div class="item-input">
                    <div class="table-row-cap ">
                        <div class="item">
                            @Resources.Congress.ArticleWordCountRemind
                        </div>
                    </div>
                    <div class="table-row-item readonly">
                        <div class="item">
                            <span id="rcounterarticle"></span>
                        </div>
                    </div>
                </div>
            }
            if (SessionParameters.CurrentCongress.Configuration.GetArticleOrginalFile.Equals(true) || Model.OrginalFileId.HasValue)
            {
                <div class="table-row-cap table-c-fit">
                    <div class="item">
                        @string.Format(Resources.Congress.OrginalFile, SessionParameters.CurrentCongress.Configuration.ArticleTitle)
                    </div>
                </div>
                <div class="table-row-item table-c-fit">
                    <div class="item">

                        @{
                            Html.RenderAction("FileUploader", "FileUpload", new { area = "FileManager", filePropName = "OrginalFileId", fileid = Model.OrginalFileId, fileName = "OrginalFileId" });

                        }
                        @if (Model != null && Model.OrginalFileId.HasValue)
                        {

                            Html.RadynFile().Image().ID(Model.OrginalFileId.Value).Download().Render();

                        }
                    </div>
                </div>

            }

        }








        @if (Model != null)
        {
            Html.FormGenerator(AppExtention.CongressMoudelName + "-/Congress/ArticlePanel/Article", Model.GetType().Name, Model.Id.ToString(), FormState.DetailsMode);
            Html.FormGenerator(AppExtention.CongressMoudelName + "-/Congress/ArticlePanel/Article?PivotId="+Model.PivotId, Model.GetType().Name, Model.Id.ToString(), FormState.DetailsMode);

        }
    </div>
</div>
