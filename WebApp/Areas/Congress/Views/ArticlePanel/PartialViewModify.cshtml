@using Radyn.Congress.DataStructure
@using Radyn.Congress.Tools
@using Radyn.FileManager
@using Radyn.Utility
@using Radyn.Web.Mvc
@using Radyn.WebApp.AppCode.Security
@using Radyn.WebApp.Areas.Common.Component
@using Radyn.WebApp.Areas.Congress.Tools
@using Radyn.WebApp.Areas.FormGenerator.Tools
@using System.Web.Mvc

@model Article

@{Html.Radyn().Theme("RadynEditor").Render(); }
    <script type="text/javascript">
    $(document).ready(function () {
        changePivotCategory();
        $('#Abstract').summernote({
            lang: '@SessionParameters.Culture',
            focus: true,
            height: 250,
            disablelink: true,
            elementname: 'Abstract',
            disableselectimage: true,
            codemirror: {
                theme: 'united'
            }
        });
        $('#ArticleOrginalText').summernote({
            lang: '@SessionParameters.Culture',
            focus: true,
            height: 250,
            disablelink: true,
            elementname: 'ArticleOrginalText',
            disableselectimage: true,
            codemirror: {
                theme: 'united'
            }
        });
        AuthorList();
        ShowAticleFlow();

        $("#hideadflow").hide();
        GetNewFlow();
        var abstractWordCount = document.getElementById("AbstractWordCount").value;
        $("#rcounter").html(abstractWordCount).hide();
        $("#rcounter").fadeIn();
        var articleOrginalWordCount = document.getElementById("ArticleOrginalWordCount").value;
        $("#rcounterarticle").html(articleOrginalWordCount).hide();
        $("#rcounterarticle").fadeIn();
        GetCount();


        $("#divAbstractText").bind('input blur focus', function () {
            GetCount();
        });
        $("#divArticleText").bind('input blur focus', function () {
            GetCountArticle();
        });

    });
    function countWords() {
        var object = $('#Abstract');
        if (object != undefined) {
            var s = $('#Abstract').val();
            var wordCount = 0;
            wordCount = (s.split(" ").length);
            return wordCount;
        }
        return 0;
    }
    function countWordsArticle() {
        var object = $('#ArticleOrginalText');
        if (object != undefined) {
            var s = $('#ArticleOrginalText').val();
            var wordCount = 0;
            wordCount = (s.split(" ").length);
            return wordCount;
        }
        return 0;
    }
    function GetCount() {
        var object = $('#Abstract');
        if (object != undefined) {
            var abstractWordCount = document.getElementById("AbstractWordCount").value;
            var wordcount = $('#Abstract').val();
            if (wordcount != "" && wordcount != undefined) {
                var number = countWords();
                var counter = parseInt(abstractWordCount) - number;
                $("#Wordcounter").html('@Resources.Congress.WordCount' + "(" + number + ")");
                $("#rcounter").html(counter);
                $("#rcounter").fadeIn();
                if (counter > 0) {
                    $("#rcounter").css("color", "#5500fd");
                } else {
                    $("#rcounter").css("color", "red");
                }
            } else {
                $("#rcounter").html(abstractWordCount);
                $("#rcounter").fadeIn();
            }
        }

    }
    function GetCountArticle() {
        var object = $('#ArticleOrginalText');
        if (object != undefined) {
            var articleOrginalWordCount = document.getElementById("ArticleOrginalWordCount").value;
            var wordcount = $('#ArticleOrginalText').val();
            if (wordcount != "" && wordcount != undefined) {
                var number = countWordsArticle();
                var counter = parseInt(articleOrginalWordCount) - number;
                $("#Wordarticlecounter").html('@Resources.Congress.WordCount' + "(" + number + ")");
                $("#rcounterarticle").html(counter);
                $("#rcounterarticle").fadeIn();
                if (counter > 0) {
                    $("#rcounterarticle").css("color", "#5500fd");
                } else {
                    $("#rcounterarticle").css("color", "red");
                }
            } else {
                $("#rcounterarticle").html(articleOrginalWordCount);
                $("#rcounterarticle").fadeIn();
            }
        }

    }

    function AuthorList() {
        $("#DivAuthorList").html("");
        $.get("@Url.Content("~/Congress/ArticlePanel/GetAuthorList")", { date: new Date().getTime() }, function (data) {
            $("#DivAuthorList").html(data).slideDown("slow");
        });
    }


    function GetNewFlow() {
        $.get("@Url.Content("~/Congress/ManagmentPanel/GetFlow")", { id: new Date().getTime() }, function (data) {
            if (data != "false") {
                $("#NewFlow").html(data).slideDown("slow");
            }
        });

    }


    function ShowAticleFlow() {
        $.get("@Url.Content("~/Congress/ManagmentPanel/GetArticleFlow")", { articelId: '@Model.Id', id: new Date().getTime() }, function (data) {
            if (data != "false") {
                $("#divArticleflow").html(data).slideDown("slow");
            }

        }).complete(function () {

            $("#DiveOpration").show();

        });

    }
    function DeleteOrginalFile(Id) {
        if (confirm("آیا از حذف اطلاعات مطمئن هستید؟")) {
            $.ajax({
                beforeSend: function () { $('#gif').show(); },
                complete: function () { $('#gif').hide(); }
            });
            $.get("@Url.Content("~/Congress/ArticlePanel/DeleteOrginalId")", { orginalId: Id, id: new Date().getTime() }, function (data) {
                $("#DeleteFile").hide();
                $("#hide").hide();

            });
        }

    }

    function HideDelete() {


    }
    function GetPrivotForm() {
        $("#Articleform").html("");
        var id = $('#PivotId').val();
        var url = '@(AppExtention.CongressMoudelName)' + "-/Congress/ArticlePanel/Article";
        if (id != undefined && id != "") {
            url += "?PivotId=" + id;

        }

        var modelname = '@Model.GetType().Name';
        var modelId = '@Model.Id.ToString()';

        $.get("@Url.Content("~/FormGenerator/UI/RenderForm")", { url: url, modelname: modelname, modelid: modelId, id: new Date().getTime() }, function (data) {
            if (data != "false") {
                $("#Articleform").html(data).slideDown("slow");
            }
        });

    }
       function changePivotCategory() {
        var id = $('#PivotCategoryId').val();
        $.get("@Url.Content("~/Congress/Pivot/GetPivot")", { categoryId: id, date: new Date().getTime() }, function (data) {
            $("#PivotId").html('');
            if (data != undefined) {
                for (var i = 0; i < data.length; i++) {
                    var op = $('<option>').attr('value', data[i].Id).text(data[i].Title);
                    if ('@Html.Encode(Model.PivotId)' == data[i].Id) {
                        op.attr('selected', 'selected');
                    }
                    $("#PivotId").append(op);
                }


            }
           
        }).complete(function() {
            GetPrivotForm();
        });
    }
    </script>
<input type="hidden" value="@Model.Id" id="Id" name="Id" />
<input type="hidden" value="@(SessionParameters.CurrentCongress.Configuration.AbstractWordCount)" name="AbstractWordCount" id="AbstractWordCount" />
<input type="hidden" value="@(SessionParameters.CurrentCongress.Configuration.ArticleOrginalWordCount)" name="ArticleOrginalWordCount" id="ArticleOrginalWordCount" />
<div id="divfix">
    <div class="item-row">
        <div class="table-row-cap">
            <div class="item">
                @Resources.Congress.PivotCategory
            </div>
        </div>
        <div class="table-row-item">
            <div class="item">
                @Html.DropDownListFor(model => model.Pivot.PivotCategoryId, (SelectList)ViewBag.Category, "", new { onchange = "changePivotCategory()", id = "PivotCategoryId" })
            </div>
        </div>
    </div>

    <div class="item-row">
        <div class="table-row-cap">
            <div class="item">
                @Resources.Congress.Pivot
            </div>
        </div>
        <div class="table-row-item">
            <div class="item">

                <select id="PivotId" name="PivotId" class="form-control" onchange="GetPrivotForm();"></select>
            </div>
        </div>
    </div>
    <div class="item-row fit">
        <div class="table-row-cap">
            <div class="item">
                @string.Format(Resources.Congress.ArticleTitle, SessionParameters.CurrentCongress.Configuration.ArticleTitle)
            </div>
        </div>
        <div class="table-row-item table-fit">
            <div class="item">
                @{

                    if (SessionParameters.CurrentCongress.Configuration.MultiLanguageArticle.Equals(true))
                    {
                        <div>
                            @{
                                Html.LanguageContentTextBoxFor(Model, m => m.Title, LanguageComponent.ComponentMode.TextBox, 500, 28, true, "LanguageId", true);
                            }
                        </div>
                    }
                    else
                    {
                        <div id="divOneLaguage">
                            @{
                                Html.LanguageContentTextBoxFor(Model, x => x.Title, LanguageComponent.ComponentMode.TextBox, 500, 28, false, "LanguageId", true);
                            }
                        </div>
                    }

                }
            </div>
        </div>
    </div>

    <div class="fit" id="DivAuthorList">
    </div>
    @if (SessionParameters.CurrentCongress != null && SessionParameters.CurrentCongress.Configuration.EnabledArticleKeyword)
    {
        <div class="item-row fit">
            <div class="table-row-cap ">
                <div class="item">
                    @Resources.Congress.KeyWord
                </div>
            </div>
            <div class="table-row-item table-fit ">
                <div class="item">
                    @Html.TextAreaFor(model => model.Keyword)
                </div>
            </div>
        </div>
    }
    <div class="item-row fit">
        <div class="table-row-cap ">
            <div class="item">
                @Resources.Congress.Description
            </div>
        </div>
        <div class="table-row-item ">
            <div class="item">
                @Html.TextAreaFor(model => model.Description, new { style = "height:100px;" })
            </div>
        </div>
    </div>
</div>


@if (SessionParameters.CurrentCongress.Configuration.AllowGetArticleAbstract())
{
    if (SessionParameters.CurrentCongress.Configuration.GetAbstractFile.Equals(false))
    {
        <div class="item-row fit" id="divAbstract">
            <div class="table-row-cap">
                <div class="item">
                    @Resources.Congress.Abstract
                    <span id="Wordcounter"></span>
                </div>
            </div>
            <div class="table-row-item">
                <div class="item" Id="divAbstractText">

                    @Html.TextAreaFor(model => model.Abstract, new { style = "height:180px;" })

                </div>
            </div>
        </div>
        <div class="fit">
            <div class="item-row">
                <div class="table-row-cap ">
                    <div class="item">
                        @Resources.Congress.MinAbstractWordCount
                    </div>
                </div>
                <div class="table-row-item table-c-fit">
                    <div class="item">
                        @(SessionParameters.CurrentCongress.Configuration.MinAbstractWordCount)
                    </div>
                </div>
            </div>
            <div class="item-row">
                <div class="table-row-cap ">
                    <div class="item">
                        @Resources.Congress.AbstractWordCountRemind
                    </div>
                </div>
                <div class="table-row-item table-c-fit">
                    <div class="item">
                        <span id="rcounter"></span>
                    </div>
                </div>
            </div>
        </div>
    }
    if (SessionParameters.CurrentCongress.Configuration.GetAbstractFile.Equals(true))
    {
        <div id="divAbstractFile" class="fit item-row">
            <div class="table-row-cap">
                <div class="item">
                    @Resources.Congress.AbstractFile
                </div>
            </div>
            <div class="table-row-item">
                <div class="item">

                    @{
                        Html.RenderAction("FileUploader", "FileUpload", new { area = "FileManager", filePropName = "AbstractFileId", fileid = Model.AbstractFileId, fileName = "abstractFileId" });
                    }


                </div>
            </div>
        </div>
    }
}

@if (SessionParameters.CurrentCongress.Configuration.AllowGetArticleOrginal())
{
    if (SessionParameters.CurrentCongress.Configuration.GetArticleOrginalFile.Equals(false))
    {
        <div class="fit item-row" id="divAbstract">
            <div class="table-row-cap">
                <div class="item">
                    @string.Format(SessionParameters.CurrentCongress.Configuration.ArticleOrginalTitle)

                    <span id="Wordarticlecounter"></span>
                </div>
            </div>
            <div class="table-row-item">
                <div class="item" Id="divArticleText">

                    @Html.TextAreaFor(model => model.ArticleOrginalText, new { style = "height:180px;" })

                </div>
            </div>
        </div>
        <div class="item-row">
            <div class="table-row-cap ">
                <div class="item">
                    @string.Format(Resources.Congress.MinimumNumberOfWords, SessionParameters.CurrentCongress.Configuration.ArticleTitle)
                </div>
            </div>
            <div class="table-row-item table-c-fit">
                <div class="item">
                    @(SessionParameters.CurrentCongress.Configuration.MinAbstractWordCount)
                </div>
            </div>
        </div>
        <div class="item-row">
            <div class="table-row-cap ">
                <div class="item">
                    @Resources.Congress.ArticleWordCountRemind
                </div>
            </div>
            <div class="table-row-item table-c-fit">
                <div class="item">
                    <span id="rcounterarticle"></span>
                </div>
            </div>
        </div>
    }
    if (SessionParameters.CurrentCongress.Configuration.GetArticleOrginalFile.Equals(true))
    {
        <div class="table-row-cap">
            <div class="item">
                @string.Format(Resources.Congress.OrginalFile, SessionParameters.CurrentCongress.Configuration.ArticleTitle)
            </div>
        </div>
        <div class="table-row-item table-c-fit">
            <div class="item">

                @{
                    Html.RenderAction("FileUploader", "FileUpload", new { area = "FileManager", filePropName = "OrginalFileId", fileid = Model.OrginalFileId, fileName = "OrginalFileId" });
                }

                <img id="gif" src="/Content/Images/Gif/LoadinSearch.gif" style="display: none;" />
            </div>
        </div>
    }
}





<div class="item-row">
    <div class="table-row-cap">
        <div class="item">
            @string.Format(Resources.Congress.ArticleState, SessionParameters.CurrentCongress.Configuration.ArticleTitle)
        </div>
    </div>
    <div class="table-row-item table-c-fit">
        <div class="item">
            @if (Model != null)
            {
                @(Model.Status.ToString().ToEnum<Enums.ArticleState>().GetDescriptionInLocalization())
            }
        </div>
    </div>
</div>


@if (Model != null)
{
    if (SessionParameters.CurrentCongress.Configuration.HasArticlePayment)
    {
        <div class="item-row">
            <div class="table-row-cap">
                <div class="item">
                    @Resources.Congress.PaymentStatus

                </div>
            </div>
            <div class="table-row-item">
                <div class="item">
                    @Html.DropDownListFor(m => m.PayStatus, new SelectList(ViewBag.paystatuslist, "Key", "Value", Model.PayStatus))
                </div>
            </div>
        </div>
        <div class="item-row">
            <div class="table-row-cap">
                <div class="item">
                    @Resources.Congress.PaymentType

                </div>
            </div>
            <div class="table-row-item">
                <div class="item">
                    @if (Model != null && Model.PaymentTypeId != null)
                    {
                        @(Model.ArticlePaymentType.Title)
                    }
                </div>
            </div>
        </div>
    }
  
    <div id="Articleform">

    </div>

    <div class="item-row">
        <div class="table-row-cap">
            <div class="item">
                @Resources.Congress.FinalState

            </div>
        </div>
        <div class="table-row-item">
            <div class="item">
                @Html.DropDownListFor(m => m.FinalState, new SelectList(ViewBag.finalstatus, "Key", "Value", Model.FinalState))
            </div>
        </div>
    </div>
}
<div class="item-row">
    <div class="table-row-cap">
        <div class="item">
            @string.Format(Resources.Congress.ArticleType, SessionParameters.CurrentCongress.Configuration.ArticleTitle)
        </div>
    </div>
    <div class="table-row-item">
        <div class="item">
            @Html.DropDownListFor(model => model.TypeId, (SelectList)ViewBag.ArticleType, "")
        </div>
    </div>
</div>

<div class="item-row">
    <div class="table-row-cap">
        <div class="item">
            @Resources.Congress.IsShare

        </div>
    </div>
    <div class="table-row-item table-c-fit radio-box">
        <div class="item">
            <span>
                @Html.RadioButtonFor(model => model.IsShare, true)@Resources.Common.Yes
            </span>

            <span>
                @Html.RadioButtonFor(model => model.IsShare, false)@Resources.Common.No
            </span>
        </div>
    </div>
</div>
<div class="item-row">
    <div class="table-row-cap">
        <div class="item">
           ارسال توضیحات به

        </div>
    </div>
    <div class="table-row-item table-c-fit radio-box">
        <div class="item">
            <span>
                @Html.RadioButtonFor(model => model.SendForReferee, true)@Resources.Congress.Referee
            </span>

            <span>
                @Html.RadioButtonFor(model => model.SendForReferee, false) @Resources.Congress.User
            </span>
        </div>
    </div>
</div>
<div id="NewFlow"></div>
<div class="fit" id="divArticleflow">
</div>



