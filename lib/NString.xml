<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NString</name>
    </assembly>
    <members>
        <member name="T:NString.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NString.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NString.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NString.Properties.Resources.MaxLengthCantBeLessThan">
            <summary>
              Looks up a localized string similar to maxLength can&apos;t be less than {0}..
            </summary>
        </member>
        <member name="P:NString.Properties.Resources.MaxLengthCantBeLessThanLengthOfEllipsisString">
            <summary>
              Looks up a localized string similar to maxLength can&apos;t be less than the length of ellipsisString..
            </summary>
        </member>
        <member name="P:NString.Properties.Resources.NumberMustBePositiveOrZero">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:NString.Properties.Resources.SubstringCountOutOfRange">
            <summary>
              Looks up a localized string similar to The number of characters must be greater than or equal to zero, and less than or equal to the length of the string..
            </summary>
        </member>
        <member name="P:NString.Properties.Resources.TemplateKeyNotFound">
            <summary>
              Looks up a localized string similar to No value found for key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:NString.StringExtensions">
            <summary>
            Provides extension methods for strings.
            </summary>
        </member>
        <member name="M:NString.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether the specified string is null or an Empty string.
            </summary>
            <param name="s">the string to test</param>
            <returns>true if the value parameter is null or an empty string (""); otherwise, false.</returns>
            <remarks>This is just a shortcut for <see cref="M:System.String.IsNullOrEmpty(System.String)"/>, allowing it to be used as an extension method.</remarks>
        </member>
        <member name="M:NString.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether the specified string is null, empty, or consists only of white-space characters.
            </summary>
            <param name="s">the string to test</param>
            <returns>true if the value parameter is null or String.Empty, or ifvalue consists exclusively of white-space characters.</returns>
            <remarks>This is just a shortcut for <see cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>, allowing it to be used as an extension method.</remarks>
        </member>
        <member name="M:NString.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates all strings in the collection, using the specified separator between each string.
            </summary>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <param name="separator">The string to use as a separator. separator is included in the returned string only if values has more than one element.</param>
            <exception cref="T:System.ArgumentNullException">values is null.</exception>
            <returns>A string that consists of the members of values delimited by the separator string. If values has no members, the method returns String.Empty.</returns>
        </member>
        <member name="M:NString.StringExtensions.GetLines(System.String)">
            <summary>
            Enumerates all lines in a string.
            </summary>
            <param name="s">The string whose lines are to be enumerated.</param>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <returns>An enumerable sequence of lines in this string.</returns>
        </member>
        <member name="M:NString.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Returns a string containing a specified number of characters from the left side of a string.
            </summary>
            <param name="s">The string from which the leftmost characters are returned.</param>
            <param name="count">The number of characters to return.</param>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">count is less than 0 or greater than the length of the string.</exception>
            <returns>A string containing a specified number of characters from the left side of a string.</returns>
        </member>
        <member name="M:NString.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Returns a string containing a specified number of characters from the right side of a string.
            </summary>
            <param name="s">The string from which the rightmost characters are returned.</param>
            <param name="count">The number of characters to return.</param>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">count is less than 0 or greater than the length of the string.</exception>
            <returns>A string containing a specified number of characters from the right side of a string.</returns>
        </member>
        <member name="M:NString.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Returns a string truncated to the specified number of characters.
            </summary>
            <param name="s">The string to truncate.</param>
            <param name="count">The maximum number of characters to return.</param>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">count is less than 0.</exception>
            <returns>A string tuncated to the specified number of characters.</returns>
        </member>
        <member name="M:NString.StringExtensions.Capitalize(System.String,System.Globalization.CultureInfo)">
            <summary>
            Capitalizes a string by making its first character uppercase.
            </summary>
            <param name="s">The string to capitalize.</param>
            <param name="culture">The culture to use when making the first character uppercase. If null, the current culture is used.</param>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <returns>The capitalized string.</returns>
        </member>
        <member name="M:NString.StringExtensions.MatchesWildcard(System.String,System.String,System.Boolean)">
            <summary>
            Checks if a string matches the specified wildcard pattern.
            </summary>
            <param name="s">The string to check.</param>
            <param name="pattern">The pattern against which the string is compared.</param>
            <param name="caseSensitive">true to perform a case-sensitive check; otherwise, false. The default is true.</param>
            <exception cref="T:System.ArgumentNullException">s or pattern is null.</exception>
            <returns>true if the string matches the pattern; otherwise, false.</returns>
            <remarks>The pattern can contain wildcards such as '*' (any number of characters) or '?' (exactly one character).
            This method is not culture-sensitive.</remarks>
        </member>
        <member name="M:NString.StringExtensions.Ellipsis(System.String,System.Int32)">
            <summary>
            Truncates a string to the specified length, replacing the last characters with an ellipsis (three dots)
            </summary>
            <param name="s">The string to truncate.</param>
            <param name="maxLength">The maximum desired length.</param>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">maxLength is less than 3.</exception>
            <returns>The truncated string.</returns>
        </member>
        <member name="M:NString.StringExtensions.Ellipsis(System.String,System.Int32,System.String)">
            <summary>
            Truncates a string to the specified length, replacing the last characters with the specified ellipsis string.
            </summary>
            <param name="s">The string to truncate.</param>
            <param name="maxLength">The maximum desired length.</param>
            <param name="ellipsisString">The string to use as an ellipsis.</param>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">maxLength is less than the length of ellipsisString.</exception>
            <returns>The truncated string.</returns>
        </member>
        <member name="M:NString.StringExtensions.IsValidEmail(System.String)">
            <summary>
             Checks if the specified string is a valid email address.
            </summary>
            <param name="s">The string to check.</param>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <returns>true if the s is a valid email address; otherwise, false.</returns>
        </member>
        <member name="M:NString.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
             Checks if the specified string contains the specified substring, using the specified comparison type.
            </summary>
            <param name="s">The string in which to seek a substring.</param>
            <param name="subString">The string to seek.</param>
            <param name="comparisonType">The type of comparison to use.</param>
            <exception cref="T:System.ArgumentNullException">s or subString is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">comparisonType is not a valid StringComparison value.</exception>
            <returns>true si <c>s</c> contains <c>subString</c>, or if <c>subString</c> is an empty string; otherwise, false.</returns>
        </member>
        <member name="M:NString.StringExtensions.ReplaceAt(System.String,System.Int32,System.Char)">
            <summary>
            Replaces a single character at the specified position with the specified replacement character.
            </summary>
            <param name="s">The string in which a character will be replaced.</param>
            <param name="index">The position of the character to replace.</param>
            <param name="newChar">The replacement character.</param>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index doesn't refer to a valid position within the string.</exception>
            <returns>The string with the replaced character.</returns>
        </member>
        <member name="T:NString.StringTemplate">
            <summary>
            Provides a string template mechanism with named placeholders that can be used to format objects.
            </summary>
            <example><![CDATA[static void Main()
            {
                var joe = new Person { Name = "Joe", DateOfBirth = new DateTime(1980, 6, 22) };
                string text = StringTemplate.Format("{Name} was born on {DateOfBirth:D}", joe);
                Console.WriteLine(text); // Prints "Joe was born on Sunday, 22 June 1980"
            }
            
            class Person
            {
                public string Name { get; set; }
                public DateTime DateOfBirth { get; set; }
            }]]>
            </example>
            <remarks>The template syntax is similar to the one used in String.Format, except that indexes are replaced by names.</remarks>
        </member>
        <member name="M:NString.StringTemplate.Parse(System.String)">
            <summary>
            Parses the provided string into a StringTemplate instance. Parsed templates are cached, so calling this method twice
            with the same argument will return the same StringTemplate instance.
            </summary>
            <param name="template">string representation of the template</param>
            <returns>A StringTemplate instance that can be used to format objects.</returns>
            <remarks>The template syntax is similar to the one used in String.Format, except that indexes are replaced by names.</remarks>
        </member>
        <member name="M:NString.StringTemplate.op_Implicit(System.String)~NString.StringTemplate">
            <summary>
            Converts a string to a StringTemplate.
            </summary>
            <param name="s">The string to convert</param>
            <returns>A StringTemplate using the converted string</returns>
        </member>
        <member name="M:NString.StringTemplate.ToString">
            <summary>
            Returns a string representation of this StringTemplate.
            </summary>
            <returns>The string representation of this StringTemplate</returns>
        </member>
        <member name="M:NString.StringTemplate.Format(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.IFormatProvider)">
            <summary>
            Replaces the template's placeholders with the values from the specified dictionary.
            </summary>
            <param name="values">A dictionary containing values for each placeholder in the template</param>
            <param name="throwOnMissingValue">Indicates whether or not to throw an exception if a value is missing for a placeholder.
            If this parameter is false and no value is found, the placeholder is left as is in the formatted string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <returns>The formatted string</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">throwOnMissingValue is true and no value was found in the dictionary for a placeholder</exception>
        </member>
        <member name="M:NString.StringTemplate.Format(System.Object,System.Boolean,System.IFormatProvider)">
            <summary>
            Replaces the template's placeholders with the values from the specified object.
            </summary>
            <param name="values">An object containing values for the placeholders. For each placeholder, this method looks for a
            corresponding property of field in this object.</param>
            <param name="throwOnMissingValue">Indicates whether or not to throw an exception if a value is missing for a placeholder.
            If this parameter is false and no value is found, the placeholder is left as is in the formatted string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <returns>The formatted string</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">throwOnMissingValue is true and no value was found in the dictionary for a placeholder</exception>
        </member>
        <member name="M:NString.StringTemplate.Format(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.IFormatProvider)">
            <summary>
            Replaces the specified template's placeholders with the values from the specified dictionary.
            </summary>
            <param name="template">The template to use to format the values.</param>
            <param name="values">A dictionary containing values for each placeholder in the template</param>
            <param name="throwOnMissingValue">Indicates whether or not to throw an exception if a value is missing for a placeholder.
            If this parameter is false and no value is found, the placeholder is left as is in the formatted string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <returns>The formatted string</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">throwOnMissingValue is true and no value was found in the dictionary for a placeholder</exception>
        </member>
        <member name="M:NString.StringTemplate.Format(System.String,System.Object,System.Boolean,System.IFormatProvider)">
            <summary>
            Replaces the specified template's placeholders with the values from the specified object.
            </summary>
            <param name="template">The template to use to format the values.</param>
            <param name="values">An object containing values for the placeholders. For each placeholder, this method looks for a
            corresponding property of field in this object.</param>
            <param name="throwOnMissingValue">Indicates whether or not to throw an exception if a value is missing for a placeholder.
            If this parameter is false and no value is found, the placeholder is left as is in the formatted string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <returns>The formatted string</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">throwOnMissingValue is true and no value was found in the dictionary for a placeholder</exception>
        </member>
        <member name="M:NString.StringTemplate.ClearCache">
            <summary>
            Clears the cached templates and property getters.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
    </members>
</doc>
